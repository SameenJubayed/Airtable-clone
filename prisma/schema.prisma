// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ---------- GENERATORS / DATASOURCE ----------

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ---------- FIELD TYPES ----------

enum FieldType {
  TEXT
  NUMBER
}

// ---------- CORE APP MODELS ----------

model Base {
    id          String   @id @default(cuid())
    name        String   @default("Untitled Base")

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    lastOpenedAt  DateTime @default(now())
    starred       Boolean  @default(false)
    starredAt     DateTime?

    createdById String 
    createdBy   User     @relation("UserBases", fields: [createdById], references: [id])

    tables      Table[]  // A "Base" contains many tables

    @@index([name])
    @@index([createdById, lastOpenedAt])
    @@index([createdById, starred], map: "Base_starred_by_user")
}

model Table {
    id        String   @id @default(cuid())
    baseId    String
    base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)

    name      String   @default("Untitled Table")
    position  Int      @default(0)
    rowHeight Int      @default(32) // in px, default 32px applies to whole table

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    columns   Column[]
    rows      Row[]

    @@unique([baseId, name]) // unique table name inside a base
    @@index([baseId, position])
    @@map("app_table")      // avoid potential conflicts with reserved identifiers
}

model Column {
    id        String    @id @default(cuid())
    tableId   String
    table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)

    name      String
    type      FieldType
    position  Int       @default(0) // for left→right ordering
    width     Int       @default(180) // Each column default 180px wide

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    cells     Cell[]

    @@unique([tableId, name])   // unique column name per table
    @@index([tableId, position])
}

model Row {
    id        String   @id @default(cuid())
    tableId   String
    table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

    position  Int      @default(0) // for top→down ordering

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cells     Cell[]

    @@index([tableId, position])
}

model Cell {
    rowId     String
    columnId  String

    row       Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
    column    Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

    // only supporting TEXT/NUMBER
    textValue   String?
    numberValue Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([rowId, columnId])          // composite PK ensures 1 cell per (row, column)
    @@index([columnId])
    @@index([textValue])
    @@index([numberValue])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]    @relation("UserBases")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
 